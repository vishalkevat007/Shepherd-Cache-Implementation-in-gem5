diff --git a/benchmark.py b/benchmark.py
new file mode 100755
index 0000000..6e46b5a
--- /dev/null
+++ b/benchmark.py
@@ -0,0 +1,64 @@
+#!/usr/bin/python3
+import os
+import shutil
+#bm = ["bwaves_s","gcc_s"]
+#assoc:8
+size = ["512kB","1MB","2MB"]
+#size = ["64kB","128kB","256kB","512kB","1MB","2MB"]
+#assoc:16
+#size = ["512kB"]
+#bm = ["perlbench_s","gcc_s","mcf_s"] ## results_fast_1 sc = 0.25
+#bm = ["xalancbmk_s","exchange2_s","specrand_is","lbm_s","deepsjeng_s","xz_s"] ## results_fast_2 sc=0.25
+#bm = ["nab_s","fotonik3d_s","specrand_fs"] ## results_fast_3 sc = 0.25
+#bm = ["cactuBSSN_s","cam4_s","imagick_s"] ##results_fast_4 sc = 0.25
+#bm = ["xalancbmk_s","exchange2_s","specrand_is","lbm_s","deepsjeng_s","xz_s"] ## results_fast_5 sc=0.5 --> long int
+#bm = ["fotonik3d_s","specrand_fs","perlbench_s","gcc_s","mcf_s"] ## results_fast_6 sc=0.5 --> long int
+bm = ["cactuBSSN_s","cam4_s","imagick_s","nab_s"] ## results_fast_7 sc=0.5 --> long int
+#bm = ["bwaves_s","cactuBSSN_s","cam4_s","imagick_s","nab_s","fotonik3d_s","specrand_fs","perlbench_s","gcc_s","mcf_s","xalancbmk_s","exchange2_s","specrand_is","lbm_s","deepsjeng_s","xz_s"]
+
+for j in size:
+	out = ""
+	out_cpi = ""
+	out_miss = ""
+	for i in bm:
+		#cmd = "./build/ECE565-X86/gem5.opt configs/spec/spec_se.py -b {}  --maxinsts=50000000 --cpu-type=TimingSimpleCPU --caches --l2cache  --l2_size={} --l2_assoc=16 --cacheline_size=64".format(i,j)
+		cmd = "./build/ECE565-X86/gem5.fast configs/spec/spec_se.py -b {}  --maxinsts=500000000 --cpu-type=TimingSimpleCPU --caches --l2cache --l1d_size=16kB --l1i_size=16kB --l2_size={} --l2_assoc=16 --cacheline_size=64".format(i,j)
+		os.system(cmd)
+		origin = "m5out/stats.txt"
+		t_f = open(origin,'r')
+		lines = t_f.readlines()
+		for line in lines:
+			if "system.l2.overallMissRate::total" in line:
+				line.strip()
+				tokens = line.split(" ")
+				tokens = [k for k in tokens if k]
+				out = out + i + ","  + tokens[1] + "\n" 
+			if "system.cpu.numCycles" in line:
+				line.strip()
+				tokens = line.split(" ")
+				tokens = [k for k in tokens if k]
+				out_cpi = out_cpi + i + ","  + tokens[1] + "\n" 
+			if "system.l2.overallMisses::total" in line:
+				line.strip()
+				tokens = line.split(" ")
+				tokens = [k for k in tokens if k]
+				out_miss = out_miss + i + ","  + tokens[1] + "\n" 
+		t_f.close()
+		f = i + "_"+ j + "_"+"stats.txt"
+		target = "results_fast_7/" + f
+		cp_f = "touch " + target
+		os.system(cp_f)
+		shutil.copy(origin, target)
+
+	out_f = "results_fast_7/" + j + "_out.txt"
+	out_fh = open(out_f,'w')
+	out_fh.write(out)
+	out_fh.close()
+	out_f_cpi = "results_fast_7/" + j + "_cpi_out.txt"
+	out_fh_cpi = open(out_f_cpi,'w')
+	out_fh_cpi.write(out_cpi)
+	out_fh_cpi.close()
+	out_f_miss = "results_fast_7/" + j + "_miss_out.txt"
+	out_fh_miss = open(out_f_miss,'w')
+	out_fh_miss.write(out_miss)
+	out_fh_miss.close()
diff --git a/configs/common/CacheConfig.py b/configs/common/CacheConfig.py
index 61c6a30..9e0bff1 100644
--- a/configs/common/CacheConfig.py
+++ b/configs/common/CacheConfig.py
@@ -120,7 +120,7 @@ def config_cache(options, system):
         # same clock as the CPUs.
         system.l2 = l2_cache_class(clk_domain=system.cpu_clk_domain,
                                    **_get_cache_opts('l2', options))
-
+        system.l2.replacement_policy = SHPRP(associativity=options.l2_assoc)
         system.tol2bus = L2XBar(clk_domain = system.cpu_clk_domain)
         system.l2.cpu_side = system.tol2bus.mem_side_ports
         system.l2.mem_side = system.membus.cpu_side_ports
diff --git a/configs/common/Caches.py b/configs/common/Caches.py
index 1468b95..69840ba 100644
--- a/configs/common/Caches.py
+++ b/configs/common/Caches.py
@@ -70,6 +70,7 @@ class L2Cache(Cache):
     mshrs = 20
     tgts_per_mshr = 12
     write_buffers = 8
+    #replacement_policy = SHPRP()
 
 class IOCache(Cache):
     assoc = 8
diff --git a/src/mem/cache/replacement_policies/ReplacementPolicies.py b/src/mem/cache/replacement_policies/ReplacementPolicies.py
index 3676a39..b719055 100644
--- a/src/mem/cache/replacement_policies/ReplacementPolicies.py
+++ b/src/mem/cache/replacement_policies/ReplacementPolicies.py
@@ -68,6 +68,12 @@ class LRURP(BaseReplacementPolicy):
     cxx_class = 'gem5::replacement_policy::LRU'
     cxx_header = "mem/cache/replacement_policies/lru_rp.hh"
 
+class SHPRP(BaseReplacementPolicy):
+    type = 'SHPRP'
+    cxx_class = 'gem5::replacement_policy::SHP'
+    cxx_header = "mem/cache/replacement_policies/shp_rp.hh"
+    associativity = Param.Int(8,"Cache Associativity")
+
 class BIPRP(LRURP):
     type = 'BIPRP'
     cxx_class = 'gem5::replacement_policy::BIP'
diff --git a/src/mem/cache/replacement_policies/SConscript b/src/mem/cache/replacement_policies/SConscript
index 027093f..daa262c 100644
--- a/src/mem/cache/replacement_policies/SConscript
+++ b/src/mem/cache/replacement_policies/SConscript
@@ -30,7 +30,7 @@ Import('*')
 
 SimObject('ReplacementPolicies.py', sim_objects=[
     'BaseReplacementPolicy', 'DuelingRP', 'FIFORP', 'SecondChanceRP',
-    'LFURP', 'LRURP', 'BIPRP', 'MRURP', 'RandomRP', 'BRRIPRP', 'SHiPRP',
+    'LFURP', 'LRURP','SHPRP', 'BIPRP', 'MRURP', 'RandomRP', 'BRRIPRP', 'SHiPRP',
     'SHiPMemRP', 'SHiPPCRP', 'TreePLRURP', 'WeightedLRURP'])
 
 Source('bip_rp.cc')
@@ -39,6 +39,7 @@ Source('dueling_rp.cc')
 Source('fifo_rp.cc')
 Source('lfu_rp.cc')
 Source('lru_rp.cc')
+Source('shp_rp.cc')
 Source('mru_rp.cc')
 Source('random_rp.cc')
 Source('second_chance_rp.cc')
diff --git a/src/mem/cache/replacement_policies/shp_rp.cc b/src/mem/cache/replacement_policies/shp_rp.cc
new file mode 100644
index 0000000..f2cb6df
--- /dev/null
+++ b/src/mem/cache/replacement_policies/shp_rp.cc
@@ -0,0 +1,299 @@
+/**
+ * Copyright (c) 2018-2020 Inria
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "mem/cache/replacement_policies/shp_rp.hh"
+
+#include <cassert>
+#include <memory>
+
+#include "params/SHPRP.hh"
+#include "sim/cur_tick.hh"
+#include <typeinfo>
+
+/*if (system.l2cache) {
+   std::cout << "L2 Cache Associativity: " << system.l2cache->assoc << std::endl;
+} else {
+    std::cout << "L2 Cache is not configured." << std::endl;
+}*/
+
+namespace gem5
+{
+
+GEM5_DEPRECATED_NAMESPACE(ReplacementPolicy, replacement_policy);
+namespace replacement_policy
+{
+
+SHP::SHP(const Params &p)
+  : Base(p), associativity(p.associativity)
+{
+  //assoc = p.associativity;
+  //std::cout << "SHP Replacement Policy created with associativity: " << associativity << std::endl;
+
+}
+
+void
+SHP::invalidate(const std::shared_ptr<ReplacementData>& replacement_data)
+{
+    // Reset last touch timestamp
+    std::static_pointer_cast<SHPReplData>(
+        replacement_data)->lastTouchTick = Tick(0);
+    // Reset insertion tick
+    std::static_pointer_cast<SHPReplData>(
+        replacement_data)->tickInserted = Tick(0);
+    //Make the rank invalid - Setting to -1
+    auto replData = std::static_pointer_cast<SHPReplData>(replacement_data);
+    for (int i = 0; i < replData->arraySize; i++) {
+	replData->dynamicArray[i] = -1;
+    }
+
+}
+
+void
+SHP::touch(const std::shared_ptr<ReplacementData>& replacement_data) const
+{
+    // Update last touch timestamp
+    std::static_pointer_cast<SHPReplData>(
+        replacement_data)->lastTouchTick = curTick();
+    auto replData = std::static_pointer_cast<SHPReplData>(replacement_data);
+    for (int i = 0; i < replData->arraySize; i++) {
+            //std::cout<<"Printing Data outside"<<replData->dynamicArray[i]<<std::endl;
+	    if (replData->dynamicArray[i] == -1){
+                //std::cout<<"Printing Data Before assigning"<<replData->dynamicArray[i]<<std::endl;
+                //Update ranks
+                replData->dynamicArray[i] = static_cast<long int>(curTick());
+                //std::cout<<"Printing Data After assigning"<<replData->dynamicArray[i]<<std::endl; 
+                //std::cout << "Type of dynamicArray: " << typeid(replData->dynamicArray[i]).name() << std::endl;      
+	    }
+    }
+}
+
+void
+SHP::reset(const std::shared_ptr<ReplacementData>& replacement_data) const
+{
+    // Set last touch timestamp
+    std::static_pointer_cast<SHPReplData>(
+        replacement_data)->lastTouchTick = curTick();
+    //Set tick inserted to current timestamp
+    std::static_pointer_cast<SHPReplData>(
+        replacement_data)->tickInserted = curTick();
+    //All the ranks should be zero, except for the rank with itself. (whatever arrayIndex contains should be -1)
+    auto replData = std::static_pointer_cast<SHPReplData>(replacement_data);
+    int rankIndex = replData->arrayIndex;
+    //std::cout<<"Tick is set in reset function: " <<curTick()<<" Inserted tick: "<<std::static_pointer_cast<SHPReplData>(replacement_data)->tickInserted<<std::endl;
+    for (int i = 0; i < replData->arraySize; i++) {
+        if (i == rankIndex) {
+		replData->dynamicArray[i] = -1;
+	} else {
+		replData->dynamicArray[i] = 0;
+	}
+    }
+}
+
+ReplaceableEntry*
+SHP::getVictim(const ReplacementCandidates& candidates) const
+{
+    // There must be at least one replacement candidate
+    assert(candidates.size() > 0);
+
+    //Printing Candidates Info:
+    /*for (size_t i = 0; i < candidates.size(); ++i) {
+	std::cout<<"Index: "<<i<<" isMC: "<<std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->isMC<<" tickInserted: "<<std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->tickInserted<<" lastTouchTick: "<<std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->lastTouchTick<<" rankIndex: "<<std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->arrayIndex<<std::endl;
+    }*/
+
+
+    //Initialization
+    int numOfSC = 0;
+    int desiredSC = static_cast<int>(associativity * 0.5);
+    for (const auto& candidate : candidates) {
+    	if (std::static_pointer_cast<SHPReplData>(candidate->replacementData)->isMC == false) { numOfSC++; }
+    }
+	
+    if (numOfSC == associativity) {
+	//std::cout<<"I'm inside IF statement"<<std::endl;
+ 	std::vector<std::pair<int, Tick>> indexTickPairs;
+
+	// Populate the index-tick pairs
+ 	for (size_t i = 0; i < candidates.size(); ++i) {
+	    auto tickInserted = std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->tickInserted;
+            //std::cout<<"Printing tick inserted: "<<std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->tickInserted<<std::endl;       	   
+            indexTickPairs.push_back({i, tickInserted});
+        }
+
+        // Simple sort using a loop (ascending order based on tickInserted)
+        for (size_t i = 0; i < indexTickPairs.size(); ++i) {
+            for (size_t j = i + 1; j < indexTickPairs.size(); ++j) {
+                if (indexTickPairs[j].second < indexTickPairs[i].second) {
+                    std::swap(indexTickPairs[i], indexTickPairs[j]);
+                }
+            }
+        }
+
+       // Extract sorted indices into a separate array
+       std::vector<int> sortArray;
+       for (const auto& pair : indexTickPairs) {
+           sortArray.push_back(pair.first);
+           //std::cout<<"Sort Index: " << pair.first << "Tick Inserted: " << pair.second << std::endl;
+       }
+
+       // sortArray now contains the indices of candidates sorted by tickInserted
+       
+       //Divide MC and SC based on sorted array and give the arrayIndex value accordingly.
+       for (int i = 0; i < candidates.size(); i++) {
+           if (i < desiredSC) {
+	       std::static_pointer_cast<SHPReplData>(candidates[sortArray[i]]->replacementData)->isMC = false;
+	       std::static_pointer_cast<SHPReplData>(candidates[sortArray[i]]->replacementData)->arrayIndex = i;
+	   } else {
+  	       std::static_pointer_cast<SHPReplData>(candidates[sortArray[i]]->replacementData)->isMC = true;
+           }
+       }
+
+       //Looping through all the candidates and make all array values to invalid(-1) except for the first index in all the cache entries.
+       for (size_t i = 0; i < candidates.size(); ++i) {
+           for (int j = 1; j < desiredSC; j++) {
+	       std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->dynamicArray[j] = -1;
+           }
+          // std::cout<<"Printing candidate info: isMC: "<<std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->isMC<<" array[0] value: "<<std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->dynamicArray[0]<<std::endl;
+       }
+    }
+ 
+    //std::cout<<"I'm getting the victim"<<std::endl;
+
+    //Shepherd replacement algorithm for the victim
+    //Filter out the actual candidates from the given candidate list. (Filter out MC + oldest SC. tickInserted of SC should be the lowest)
+    int filteredCandidatesSize = (associativity - desiredSC + 1);
+    int* filteredIndexArray = new int[filteredCandidatesSize];
+    int filteredArrayCount = 0;
+    int oldSCIndex = -1;
+    long int oldSCTick = -1;
+    for (size_t i = 0; i < candidates.size(); ++i) {
+ 	if (std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->isMC == true) {
+      	    filteredIndexArray[filteredArrayCount] = i;
+	    filteredArrayCount++;
+	} else {
+	    if (oldSCIndex == -1) {
+	    	oldSCIndex = i;
+	    	oldSCTick = std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->tickInserted;
+	    } else if (std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->tickInserted < oldSCTick) {
+	   	oldSCIndex = i;
+		oldSCTick = std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->tickInserted;
+	    }
+	}
+    }
+    filteredIndexArray[filteredArrayCount] = oldSCIndex;
+    filteredArrayCount++;
+    
+    int oldSCRankIndex = std::static_pointer_cast<SHPReplData>(candidates[oldSCIndex]->replacementData)->arrayIndex; 
+
+
+    //Printing Candidates Info:
+    for (size_t i = 0; i < candidates.size(); ++i) {
+            std::cout<<"Index: "<<i<<" SC Rank: "<<std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->dynamicArray[oldSCRankIndex]<<" lastTouchtick: "<<std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->lastTouchTick<<" tickInserted: "<<std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->tickInserted<<std::endl;
+    }
+                
+    std::cout<<"Oldest SC Index: "<<oldSCIndex<<std::endl;
+    /*	From the filtered candidates, create another list whose rank is e (-1) wrt oldest SC arrayIndexValue. 
+	If this list is not empty, apply LRU on this list. (Lowest lastTouchTick)
+	Else, throw out the highest ranked element wrt oldest SC arrayIndexValue.
+    */
+    
+    int victimIndex = -1;
+    int invalidIndex = -1;
+    long int invalidIndexTick = -1;
+    int rankedIndex = -1;
+    long int rankedRank = -1;
+    
+    //std::cout<<"invalidIndex that is set: "<<invalidIndex<<std::endl;
+    ReplaceableEntry* victim = candidates[0];
+    for (int i = 0; i < filteredArrayCount; i++) {
+	//std::cout<<" Rank Value: "<<std::static_pointer_cast<SHPReplData>(candidates[filteredIndexArray[i]]->replacementData)->dynamicArray[oldSCRankIndex]<<std::endl;
+	if (std::static_pointer_cast<SHPReplData>(candidates[filteredIndexArray[i]]->replacementData)->dynamicArray[oldSCRankIndex] == -1) {
+	    if (invalidIndex == -1 || std::static_pointer_cast<SHPReplData>(candidates[filteredIndexArray[i]]->replacementData)->lastTouchTick < invalidIndexTick) {
+		invalidIndex = filteredIndexArray[i];
+		invalidIndexTick = std::static_pointer_cast<SHPReplData>(candidates[filteredIndexArray[i]]->replacementData)->lastTouchTick;
+		//std::cout<<"I'm inside the IF where rank value is 1 and updating invalidIndex: "<<invalidIndex<<std::endl;
+	    }
+	} else {
+	    if (rankedIndex == -1 || std::static_pointer_cast<SHPReplData>(candidates[filteredIndexArray[i]]->replacementData)->dynamicArray[oldSCRankIndex] > rankedRank) {
+		rankedIndex = filteredIndexArray[i];
+		rankedRank = std::static_pointer_cast<SHPReplData>(candidates[filteredIndexArray[i]]->replacementData)->dynamicArray[oldSCRankIndex];
+	    }
+	}	
+    }
+
+    if (invalidIndex == -1) {
+	victim = candidates[rankedIndex];
+        victimIndex = rankedIndex;
+    } else {
+	victim = candidates[invalidIndex];
+        victimIndex = rankedIndex;
+    }
+
+    std::cout<<"Victim Index : "<<victimIndex<<std::endl;
+    //If (victim is SC) -> do nothing, Else -> oldest SC should become MC.
+    if (std::static_pointer_cast<SHPReplData>(victim->replacementData)->isMC == true) {
+	std::static_pointer_cast<SHPReplData>(candidates[oldSCIndex]->replacementData)->isMC = true;
+    }
+
+    //Make victim as SC
+    std::static_pointer_cast<SHPReplData>(victim->replacementData)->isMC = false;
+
+    //Assign oldest SC arrayIndexValue to victim arrayIndexValue
+    std::static_pointer_cast<SHPReplData>(victim->replacementData)->arrayIndex = oldSCRankIndex;
+
+    //arrayIndexValue of victim value is found and make that arrayIndex in all candidates to -1.	
+    for (size_t i = 0; i < candidates.size(); ++i) {
+	std::static_pointer_cast<SHPReplData>(candidates[i]->replacementData)->dynamicArray[oldSCRankIndex] = -1;
+    }
+
+    //std::cout<<"Invalid Index: " <<invalidIndex<<" Ranked Index: "<<rankedIndex<<std::endl;
+    /* LRU Replacement Policy
+    // Visit all candidates to find victim
+    ReplaceableEntry* victim = candidates[0];
+    for (const auto& candidate : candidates) {
+        // Update victim entry if necessary
+        if (std::static_pointer_cast<SHPReplData>(
+                    candidate->replacementData)->lastTouchTick <
+                std::static_pointer_cast<SHPReplData>(
+                    victim->replacementData)->lastTouchTick) {
+            victim = candidate;
+        }
+    }*/
+
+    return victim;
+}
+
+std::shared_ptr<ReplacementData>
+SHP::instantiateEntry()
+{
+    int s = static_cast<int>(associativity * 0.5);  //50% of associativity for Shepherd Cache
+    //std::cout<<"I'm the instantiation call"<<std::endl;
+    return std::shared_ptr<ReplacementData>(new SHPReplData(s));
+}
+
+} // namespace replacement_policy
+} // namespace gem5
diff --git a/src/mem/cache/replacement_policies/shp_rp.hh b/src/mem/cache/replacement_policies/shp_rp.hh
new file mode 100644
index 0000000..627093f
--- /dev/null
+++ b/src/mem/cache/replacement_policies/shp_rp.hh
@@ -0,0 +1,143 @@
+/**
+ * Copyright (c) 2018-2020 Inria
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**
+ * @file
+ * Declaration of a Least Recently Used replacement policy.
+ * The victim is chosen using the last touch timestamp.
+ */
+
+#ifndef __MEM_CACHE_REPLACEMENT_POLICIES_SHP_RP_HH__
+#define __MEM_CACHE_REPLACEMENT_POLICIES_SHP_RP_HH__
+
+#include "mem/cache/replacement_policies/base.hh"
+
+namespace gem5
+{
+
+struct SHPRPParams;
+
+GEM5_DEPRECATED_NAMESPACE(ReplacementPolicy, replacement_policy);
+namespace replacement_policy
+{
+
+class SHP : public Base
+{
+  private:
+    const uint64_t associativity;
+
+  protected:
+    /** LRU-specific implementation of replacement data. */
+    struct SHPReplData : ReplacementData
+    {
+        /** Tick on which the entry was last touched. */
+        Tick lastTouchTick;
+
+        /** Tick on which the entry was inserted. */
+        Tick tickInserted;
+
+        bool isMC;
+ 	uint32_t arrayIndex;
+	long int* dynamicArray;
+	int arraySize;
+
+	/**
+         ** Default constructor. Invalidate data.
+  	**/
+        SHPReplData(int size) : lastTouchTick(0), tickInserted(0), isMC(false), arrayIndex(0), arraySize(size) 
+	{
+		dynamicArray = new long int[arraySize];
+                for (int i = 0; i < arraySize; i++) {
+			dynamicArray[i] = -1;
+		}
+	//	std::cout << "SHPReplData created with arraysize: " << arraySize << std::endl;
+	}
+	
+	/** Default Constructor for initializing array*/
+	SHPReplData() : lastTouchTick(0), tickInserted(0), isMC(false), arrayIndex(0), dynamicArray(nullptr), arraySize(0) {}
+	
+	/* Destructor */
+	~SHPReplData()
+	{
+		delete[] dynamicArray;
+	}
+    };
+
+  public:
+    typedef SHPRPParams Params;
+    SHP(const Params &p);
+    ~SHP() = default;
+    //int assoc;
+    /**
+     * Invalidate replacement data to set it as the next probable victim.
+     * Sets its last touch tick as the starting tick.
+     *
+     * @param replacement_data Replacement data to be invalidated.
+     */
+    void invalidate(const std::shared_ptr<ReplacementData>& replacement_data)
+                                                                    override;
+
+    /**
+     * Touch an entry to update its replacement data.
+     * Sets its last touch tick as the current tick.
+     *
+     * @param replacement_data Replacement data to be touched.
+     */
+    void touch(const std::shared_ptr<ReplacementData>& replacement_data) const
+                                                                     override;
+
+    /**
+     * Reset replacement data. Used when an entry is inserted.
+     * Sets its last touch tick as the current tick.
+     *
+     * @param replacement_data Replacement data to be reset.
+     */
+    void reset(const std::shared_ptr<ReplacementData>& replacement_data) const
+                                                                     override;
+
+    /**
+     * Find replacement victim using LRU timestamps.
+     *
+     * @param candidates Replacement candidates, selected by indexing policy.
+     * @return Replacement entry to be replaced.
+     */
+    ReplaceableEntry* getVictim(const ReplacementCandidates& candidates) const
+                                                                     override;
+
+    /**
+     * Instantiate a replacement data entry.
+     *
+     * @return A shared pointer to the new replacement data.
+     */
+    std::shared_ptr<ReplacementData> instantiateEntry() override;
+};
+
+} // namespace replacement_policy
+} // namespace gem5
+
+#endif // __MEM_CACHE_REPLACEMENT_POLICIES_SHP_RP_HH__
